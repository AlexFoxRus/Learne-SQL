                                                        СОздание таблицы.

CREATE TABLE book(                            --создать таблицу
    book_id INT PRIMARY KEY AUTO_INCREMENT    --создать автоматический атрибут (столбец), нумерация.
    title VARCHARE(50)                        --создать атрибут (столбец) для описания в 50 символов
    author VARCHARE(30)
    price DECIMAL(8, 2)                       --создать атрибут с вещественными (десятичными) числами, 8 знаков перед запятой и 2 знака после запятой
    amount INT                                --создать атрибут в котором будут целые числа
   );
   
/*Алгоритм создания новой таблицы:
ключевые слова : CREATE TABLE
имя создаваемой таблицы;
открывающая круглая скобка «(»;
название поля и его описание, которое включает тип поля и другие необязательные характеристики;
запятая;
название поля и его описание;
...
закрывающая скобка «)» */

                                                          Внесение данных в таблицу.

INSERT INTO book (title, author, price, amount)             --внести записи в таблицу - название таблицы (поле таблицы 1, поле таблицы 2...)
    VALUES ("Мастер и Маргарита", "Булгаков", 644.5, 3)     --внести значения соответствубщие полям таблицы (значение 1, значение 2 ....)
SELECT * FROM book                                          --вывести получившуюся таблицу.

/*результат*/
+---------+--------------------+---------------+--------+--------+
| book_id | title              | author        | price  | amount |
+---------+--------------------+---------------+--------+--------+
| 1       | Мастер и Маргарита | Булгаков М.А. | 670.99 | 3      |
+---------+--------------------+---------------+--------+--------+

/*Алгоритм внесения записей:
ключевые слова INSERT INTO (ключевое слово INTO можно пропустить);
имя таблицы, в которую добавляется запись;
открывающая круглая скобка «(»;
список полей через запятую, в которые следует занести новые данные;
закрывающая скобка «)»;
ключевое слово VALUES;
открывающая круглая скобка «(»;
список значений через запятую, которые заносятся в соответствующие поля, при этом текстовые значения заключаются в кавычки, числовые значения записываются без кавычек, в качестве разделителя целой и дробной части используется точка;
закрывающая скобка «)».
*/
                                    
                                                                  Выборка данных

Для того чтобы отобрать все данные из таблицы используется SQL запрос следующей структуры: 

- ключевое слово SELECT; 
- символ « *» ; 
- ключевое слово FROM; 
- имя таблицы.

Переименовать столбец:

- ключевое слово SELECT ; 
- имя столбца;
- ключевое слово AS ; 
- новое название столбца (можно русскими буквами), но это должно быть одно слово, если название состоит из двух слов – соединяйте их подчеркиванием, например, Количество_книг ; 
- запятая; 
- имя столбца; 
.... 
- ключевое слово FROM ; 
- имя таблицы.

Математические функции:

Функция	                        Описание	                                            Пример
CEILING(x)--возвращает наименьшее целое число, большее или равное x
            (округляет до целого числа в большую сторону)-----------------------CEILING(4.2)=5 CEILING(-5.8)=-5
ROUND(x, k)-округляет значение x до k знаков после запятой,
            если k не указано – x округляется до целого-------------------------ROUND(4.361)=4 ROUND(5.86592,1)=5.9
FLOOR(x)----возвращает наибольшее целое число, меньшее или равное x
            (округляет до  целого числа в меньшую сторону)----------------------FLOOR(4.2)=4 FLOOR(-5.8)=-6
POWER(x, y)-возведение x в степень y--------------------------------------------POWER(3,4)=81.0
SQRT(x)-----квадратный корень из x----------------------------------------------SQRT(4)=2.0 SQRT(2)=1.41...
DEGREES(x)--конвертирует значение x из радиан в градусы-------------------------DEGREES(3) = 171.8...
RADIANS(x)--конвертирует значение x из градусов в радианы-----------------------RADIANS(180)=3.14...
ABS(x)------модуль числа x------------------------------------------------------ABS(-1) = 1 ABS(1) = 1
PI()--------pi = 3.1415926...	 

Операторы сравнения:
«=»     равно  
«<>»    не равно 
«>»     больше   
«<»     меньше
«>=»    больше или равно
«<=»    меньше или равно 

Логические операторы:
«AND»   И
«OR»    ИЛИ 
«NOT»   НЕ 

Приоритеты операций:
круглые скобки
умножение  (*),  деление (/)
сложение  (+), вычитание (-)
операторы сравнения (=, >, <, >=, <=, <>)
NOT
AND
OR


IF      (логическое_выражение, выражение_1, выражение_2)
        Функция вычисляет логическое_выражение, если оно истина – в поле заносится значение выражения_1, в противном случае –  значение выражения_2. Все три параметра IF() являются обязательными.
        Допускается использование вложенных функций, вместо выражения_1 или выражения_2 может стоять новая функция IF.
        
WHERE   Логическое выражение, от результата которого зависит будет ли включена строка в выборку или нет. 
        Если условие – истина, то строка(запись)  включается в выборку, если ложь – нет.задается после указания таблицы, откуда выбираются данные.
        
BETWEEN позволяет отобрать данные, относящиеся к некоторому интервалу, включая его границы ставится после WHERE, приоритет как и у логических.

IN      позволяет выбрать данные, соответствующие значениям из списка, ставиться после WHERE, приоритет как и у логических.

ORDER BY Оператор сортировки. После оператора указывать столбец или несколько столбцов, по которым необходимо отсортировать отобранные строки.Сортирует по первому или для тех строк, значения первого столбца у которых одинаково.
         Сортирует по возрастанию.
     
ASC      С этим оператором сортировка будет по возрастанию
DESC     С этим оператором сортировка будет по убыванию

Порядок действий операторов:
- FROM
- WHERE
- SELECT
- ORDER BY

LIKE    Сравнивать строки не на полное совпадение (не совпадение), а в соответствии с шаблоном.
        
Символ-шаблон	                     Описание	                                                                    Пример
%---------------Любая строка, содержащая ноль или более символов
                выполняет поиск и выдает все книги, инициалы авторов которых содержат «М.»-----------------SELECT * FROM book WHERE author LIKE '%М.%'
_ --------------Любой одиночный символ	                                                                
(подчеркивание)	выполняет поиск и выдает все книги, названия которых либо «Поэма», либо «Поэмы» и пр.------SELECT * FROM book WHERE title LIKE 'Поэм_'

WHERE   title LIKE "_% и _%"  /*отбирает слово И внутри названия */
    OR  title LIKE "и _%"     /*отбирает слово И в начале названия */
    OR  title LIKE "_% и"     /*отбирает слово И в конце названия */
    OR  title LIKE "и"        /*отбирает название, состоящее из одного слова И */
    
                                                        Запросы, групповые операции
                                                        
DISTINCT    Чтобы отобрать уникальные элементы некоторого столбца. Размещается сразу после SELECT. Другой способ - использовать GROUP BY.

SUM(х)    Суммирует значения х в сгруппированных строказ по столбцу(у). 
          В качестве аргумента может использоваться и арифметическое действие. 
          Так же может вычислить общее количество по всей таблице. 
          Указывается после SELECT. Используется вместе с GROUP BY.
COUNT(х)  Выводит количество строк/значений/кортежей в группе сгруппированных по столбцу(у). 
          Т.е. показывает сколько одинаковых записей в столбе у. Указывается после SELECT. Используется вместе с GROUP BY.

MIN()     Минимальное значение. Указывается после SELECT. Используется вместе с GROUP BY.
MAX()     Максимальное значение. Указывается после SELECT. Используется вместе с GROUP BY.
AVG()     Среднее значение. Указывается после SELECT. Используется вместе с GROUP BY.

HAVING    По работе похоже на WHERE, только используется с групповыми функциями (группирует в колонках). Указывается после GROUP BY. 
          Но может использоваться и вместе с WHERE.
Толгда алгоритмя действий такой:
- FROM
- WHERE
- GROUP BY
- HAVING
- SELECT
- ORDER BY
                                                            Вложенные запросы
                                                            
Вложенный запрос используется для выборки данных, которые будут использоваться в условии отбора записей основного запроса. 
Его применяют для:
- сравнения выражения с результатом вложенного запроса;
- определения того, включено ли выражение в результаты вложенного запроса;
- проверки того, выбирает ли запрос определенные строки.

Вложенный запрос имеет следующие компоненты:
- ключевое слово SELECT  после которого указываются имена столбцов или выражения (чаще всего список содержит один элемент);
- ключевое слово FROM и имя таблицы, из которой выбираются данные;
- необязательное предложение WHERE;
- необязательное предложение GROUP BY:
- необязательное предложение HAVING.

WHERE | HAVING выражение оператор_сравнения (вложенный запрос);
WHERE | HAVING выражение, включающее вложенный запрос;
WHERE | HAVING выражение [NOT] IN (вложенный запрос);
WHERE | HAVING выражение  оператор_сравнения  ANY | ALL (вложенный запрос).

Вложенный запрос, возвращающий одно значение, может использоваться в условии отбора записей WHERE как обычное значение совместно с операциями =, <>, >=, <=, >, <.
к нему можно что-то прибавить, вычесть и пр
IN      определяет, совпадает ли указанное в логическом выражении значение с одним из значений, содержащихся во вложенном запросе 
NOT IN  выражение истинно, если значение не содержится во вложенном запросе

ANY     все записи, для которых  выражение со знаком отношения верно хотя бы для одного элемента результирующего запроса. 
        Указывается во вложенном запросе оператора WHERE
amount > ANY (10, 12) эквивалентно amount > 10
amount < ANY (10, 12) эквивалентно amount < 12
amount = ANY (10, 12) эквивалентно (amount = 10) OR (amount = 12), а также amount IN  (10,12)
amount <> ANY (10, 12) вернет все записи с любым значением amount, включая 10 и 12

ALL     все записи, для которых  выражение со знаком отношения верно для всех элементов результирующего запроса. 
        Указывается во вложенном запросе оператора WHERE
amount > ALL (10, 12) эквивалентно amount > 12
amount < ALL (10, 12) эквивалентно amount < 10
amount = ALL (10, 12) не вернет ни одной записи, так как эквивалентно (amount = 10) AND (amount = 12)
amount <> ALL (10, 12) вернет все записи кроме тех,  в которыхamount равно 10 или 12

Вложенный запрос может быть и внутри оператора SELECT. Ставиться еще один SELECT и выводится в результате в отдельный столбец. Его лучше переименовать оператором AS.

                                                       Запросы корректировки данных

1. Добавление записей. Так же как и при создание новой таблицы.
2. Данные можно внести из одной таблицы в другую.
   В запросе INCERT INTO указывается в какую таблицу и в какие столбцы, затем в SELECT указываются одноименные столбцы и после FROM указвается из какой таблицы.
3. В запросе на добавление можно использовать вложенные запросы после FROM

UPDATE  Используется для обновления данных таблицы. Можно обновлять несколько аргументов (столбцов) одновременно.
UPDATE [таблица] SET [поле = выражение]
UPDATE [таблица] SET [поле1 = выражение1, поле2 = выражение2]
таблица     – имя таблицы, в которой будут проводиться изменения;
поле        – поле таблицы, в которое будет внесено изменение;
выражение   – выражение,  значение которого будет занесено в поле.

Для обновления данных в нескольких таблицах:
для столбцов, имеющих одинаковые имена, необходимо указывать имя таблицы, к которой они относятся, например, book.price – столбец price из таблицы book, supply.price – столбец price из таблицы supply;
все таблицы, используемые в запросе, нужно перечислить после ключевого слова UPDATE;
в запросе обязательно условие WHERE, в котором указывается условие при котором обновляются данные.

UPDATE book, supply 
SET book.amount = book.amount + supply.amount
WHERE book.title = supply.title AND book.author = supply.author;

DELETE FROM [таблица или столбец]; удаляет все данные из таблицы или столбца. При использовании WHERE можно указать условие при котором данные будут удалены.

Новая таблица может быть создана на основе данных из другой таблицы. 
Для этого используется запрос SELECT, результирующая таблица которого и будет новой таблицей базы данных. 
При этом имена столбцов запроса становятся именами столбцов новой таблицы. Запрос на создание новой таблицы имеет вид:

CREATE TABLE имя_таблицы AS
SELECT ...



